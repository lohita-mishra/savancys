/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.savancys.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.savancys.model.JobApplicant;
import com.savancys.model.JobApplicantModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the JobApplicant service. Represents a row in the &quot;JobApplicant&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>JobApplicantModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JobApplicantImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see JobApplicantImpl
 * @generated
 */
@JSON(strict = true)
public class JobApplicantModelImpl
	extends BaseModelImpl<JobApplicant> implements JobApplicantModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a job applicant model instance should use the <code>JobApplicant</code> interface instead.
	 */
	public static final String TABLE_NAME = "JobApplicant";

	public static final Object[][] TABLE_COLUMNS = {
		{"jobApplicantID", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"firstName", Types.VARCHAR},
		{"lastName", Types.VARCHAR}, {"phoneNumber", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"jobType", Types.VARCHAR},
		{"state_", Types.VARCHAR}, {"message", Types.VARCHAR},
		{"fileId", Types.BIGINT}, {"jobPostId", Types.BIGINT},
		{"skill", Types.VARCHAR}, {"webAuthorization", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("jobApplicantID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("jobType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("message", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("jobPostId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("skill", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("webAuthorization", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table JobApplicant (jobApplicantID LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,firstName VARCHAR(75) null,lastName VARCHAR(75) null,phoneNumber VARCHAR(75) null,email VARCHAR(75) null,jobType VARCHAR(75) null,state_ VARCHAR(75) null,message VARCHAR(75) null,fileId LONG,jobPostId LONG,skill VARCHAR(75) null,webAuthorization VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table JobApplicant";

	public static final String ORDER_BY_JPQL =
		" ORDER BY jobApplicant.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY JobApplicant.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public JobApplicantModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _jobApplicantID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setJobApplicantID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _jobApplicantID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return JobApplicant.class;
	}

	@Override
	public String getModelClassName() {
		return JobApplicant.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<JobApplicant, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<JobApplicant, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<JobApplicant, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((JobApplicant)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<JobApplicant, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<JobApplicant, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(JobApplicant)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<JobApplicant, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<JobApplicant, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<JobApplicant, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<JobApplicant, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<JobApplicant, Object>>();

			attributeGetterFunctions.put(
				"jobApplicantID", JobApplicant::getJobApplicantID);
			attributeGetterFunctions.put("groupId", JobApplicant::getGroupId);
			attributeGetterFunctions.put(
				"companyId", JobApplicant::getCompanyId);
			attributeGetterFunctions.put("userId", JobApplicant::getUserId);
			attributeGetterFunctions.put("userName", JobApplicant::getUserName);
			attributeGetterFunctions.put(
				"createDate", JobApplicant::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", JobApplicant::getModifiedDate);
			attributeGetterFunctions.put(
				"firstName", JobApplicant::getFirstName);
			attributeGetterFunctions.put("lastName", JobApplicant::getLastName);
			attributeGetterFunctions.put(
				"phoneNumber", JobApplicant::getPhoneNumber);
			attributeGetterFunctions.put("email", JobApplicant::getEmail);
			attributeGetterFunctions.put("jobType", JobApplicant::getJobType);
			attributeGetterFunctions.put("state", JobApplicant::getState);
			attributeGetterFunctions.put("message", JobApplicant::getMessage);
			attributeGetterFunctions.put("fileId", JobApplicant::getFileId);
			attributeGetterFunctions.put(
				"jobPostId", JobApplicant::getJobPostId);
			attributeGetterFunctions.put("skill", JobApplicant::getSkill);
			attributeGetterFunctions.put(
				"webAuthorization", JobApplicant::getWebAuthorization);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<JobApplicant, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<JobApplicant, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<JobApplicant, ?>>();

			attributeSetterBiConsumers.put(
				"jobApplicantID",
				(BiConsumer<JobApplicant, Long>)
					JobApplicant::setJobApplicantID);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<JobApplicant, Long>)JobApplicant::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<JobApplicant, Long>)JobApplicant::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<JobApplicant, Long>)JobApplicant::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<JobApplicant, String>)JobApplicant::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<JobApplicant, Date>)JobApplicant::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<JobApplicant, Date>)JobApplicant::setModifiedDate);
			attributeSetterBiConsumers.put(
				"firstName",
				(BiConsumer<JobApplicant, String>)JobApplicant::setFirstName);
			attributeSetterBiConsumers.put(
				"lastName",
				(BiConsumer<JobApplicant, String>)JobApplicant::setLastName);
			attributeSetterBiConsumers.put(
				"phoneNumber",
				(BiConsumer<JobApplicant, String>)JobApplicant::setPhoneNumber);
			attributeSetterBiConsumers.put(
				"email",
				(BiConsumer<JobApplicant, String>)JobApplicant::setEmail);
			attributeSetterBiConsumers.put(
				"jobType",
				(BiConsumer<JobApplicant, String>)JobApplicant::setJobType);
			attributeSetterBiConsumers.put(
				"state",
				(BiConsumer<JobApplicant, String>)JobApplicant::setState);
			attributeSetterBiConsumers.put(
				"message",
				(BiConsumer<JobApplicant, String>)JobApplicant::setMessage);
			attributeSetterBiConsumers.put(
				"fileId",
				(BiConsumer<JobApplicant, Long>)JobApplicant::setFileId);
			attributeSetterBiConsumers.put(
				"jobPostId",
				(BiConsumer<JobApplicant, Long>)JobApplicant::setJobPostId);
			attributeSetterBiConsumers.put(
				"skill",
				(BiConsumer<JobApplicant, String>)JobApplicant::setSkill);
			attributeSetterBiConsumers.put(
				"webAuthorization",
				(BiConsumer<JobApplicant, String>)
					JobApplicant::setWebAuthorization);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getJobApplicantID() {
		return _jobApplicantID;
	}

	@Override
	public void setJobApplicantID(long jobApplicantID) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jobApplicantID = jobApplicantID;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName = firstName;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastName = lastName;
	}

	@JSON
	@Override
	public String getPhoneNumber() {
		if (_phoneNumber == null) {
			return "";
		}
		else {
			return _phoneNumber;
		}
	}

	@Override
	public void setPhoneNumber(String phoneNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phoneNumber = phoneNumber;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getJobType() {
		if (_jobType == null) {
			return "";
		}
		else {
			return _jobType;
		}
	}

	@Override
	public void setJobType(String jobType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jobType = jobType;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_state = state;
	}

	@JSON
	@Override
	public String getMessage() {
		if (_message == null) {
			return "";
		}
		else {
			return _message;
		}
	}

	@Override
	public void setMessage(String message) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_message = message;
	}

	@JSON
	@Override
	public long getFileId() {
		return _fileId;
	}

	@Override
	public void setFileId(long fileId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileId = fileId;
	}

	@JSON
	@Override
	public long getJobPostId() {
		return _jobPostId;
	}

	@Override
	public void setJobPostId(long jobPostId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_jobPostId = jobPostId;
	}

	@JSON
	@Override
	public String getSkill() {
		if (_skill == null) {
			return "";
		}
		else {
			return _skill;
		}
	}

	@Override
	public void setSkill(String skill) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_skill = skill;
	}

	@JSON
	@Override
	public String getWebAuthorization() {
		if (_webAuthorization == null) {
			return "";
		}
		else {
			return _webAuthorization;
		}
	}

	@Override
	public void setWebAuthorization(String webAuthorization) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_webAuthorization = webAuthorization;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), JobApplicant.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public JobApplicant toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, JobApplicant>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JobApplicantImpl jobApplicantImpl = new JobApplicantImpl();

		jobApplicantImpl.setJobApplicantID(getJobApplicantID());
		jobApplicantImpl.setGroupId(getGroupId());
		jobApplicantImpl.setCompanyId(getCompanyId());
		jobApplicantImpl.setUserId(getUserId());
		jobApplicantImpl.setUserName(getUserName());
		jobApplicantImpl.setCreateDate(getCreateDate());
		jobApplicantImpl.setModifiedDate(getModifiedDate());
		jobApplicantImpl.setFirstName(getFirstName());
		jobApplicantImpl.setLastName(getLastName());
		jobApplicantImpl.setPhoneNumber(getPhoneNumber());
		jobApplicantImpl.setEmail(getEmail());
		jobApplicantImpl.setJobType(getJobType());
		jobApplicantImpl.setState(getState());
		jobApplicantImpl.setMessage(getMessage());
		jobApplicantImpl.setFileId(getFileId());
		jobApplicantImpl.setJobPostId(getJobPostId());
		jobApplicantImpl.setSkill(getSkill());
		jobApplicantImpl.setWebAuthorization(getWebAuthorization());

		jobApplicantImpl.resetOriginalValues();

		return jobApplicantImpl;
	}

	@Override
	public JobApplicant cloneWithOriginalValues() {
		JobApplicantImpl jobApplicantImpl = new JobApplicantImpl();

		jobApplicantImpl.setJobApplicantID(
			this.<Long>getColumnOriginalValue("jobApplicantID"));
		jobApplicantImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		jobApplicantImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		jobApplicantImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		jobApplicantImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		jobApplicantImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		jobApplicantImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		jobApplicantImpl.setFirstName(
			this.<String>getColumnOriginalValue("firstName"));
		jobApplicantImpl.setLastName(
			this.<String>getColumnOriginalValue("lastName"));
		jobApplicantImpl.setPhoneNumber(
			this.<String>getColumnOriginalValue("phoneNumber"));
		jobApplicantImpl.setEmail(this.<String>getColumnOriginalValue("email"));
		jobApplicantImpl.setJobType(
			this.<String>getColumnOriginalValue("jobType"));
		jobApplicantImpl.setState(
			this.<String>getColumnOriginalValue("state_"));
		jobApplicantImpl.setMessage(
			this.<String>getColumnOriginalValue("message"));
		jobApplicantImpl.setFileId(this.<Long>getColumnOriginalValue("fileId"));
		jobApplicantImpl.setJobPostId(
			this.<Long>getColumnOriginalValue("jobPostId"));
		jobApplicantImpl.setSkill(this.<String>getColumnOriginalValue("skill"));
		jobApplicantImpl.setWebAuthorization(
			this.<String>getColumnOriginalValue("webAuthorization"));

		return jobApplicantImpl;
	}

	@Override
	public int compareTo(JobApplicant jobApplicant) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), jobApplicant.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof JobApplicant)) {
			return false;
		}

		JobApplicant jobApplicant = (JobApplicant)object;

		long primaryKey = jobApplicant.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<JobApplicant> toCacheModel() {
		JobApplicantCacheModel jobApplicantCacheModel =
			new JobApplicantCacheModel();

		jobApplicantCacheModel.jobApplicantID = getJobApplicantID();

		jobApplicantCacheModel.groupId = getGroupId();

		jobApplicantCacheModel.companyId = getCompanyId();

		jobApplicantCacheModel.userId = getUserId();

		jobApplicantCacheModel.userName = getUserName();

		String userName = jobApplicantCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			jobApplicantCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			jobApplicantCacheModel.createDate = createDate.getTime();
		}
		else {
			jobApplicantCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			jobApplicantCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			jobApplicantCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		jobApplicantCacheModel.firstName = getFirstName();

		String firstName = jobApplicantCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			jobApplicantCacheModel.firstName = null;
		}

		jobApplicantCacheModel.lastName = getLastName();

		String lastName = jobApplicantCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			jobApplicantCacheModel.lastName = null;
		}

		jobApplicantCacheModel.phoneNumber = getPhoneNumber();

		String phoneNumber = jobApplicantCacheModel.phoneNumber;

		if ((phoneNumber != null) && (phoneNumber.length() == 0)) {
			jobApplicantCacheModel.phoneNumber = null;
		}

		jobApplicantCacheModel.email = getEmail();

		String email = jobApplicantCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			jobApplicantCacheModel.email = null;
		}

		jobApplicantCacheModel.jobType = getJobType();

		String jobType = jobApplicantCacheModel.jobType;

		if ((jobType != null) && (jobType.length() == 0)) {
			jobApplicantCacheModel.jobType = null;
		}

		jobApplicantCacheModel.state = getState();

		String state = jobApplicantCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			jobApplicantCacheModel.state = null;
		}

		jobApplicantCacheModel.message = getMessage();

		String message = jobApplicantCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			jobApplicantCacheModel.message = null;
		}

		jobApplicantCacheModel.fileId = getFileId();

		jobApplicantCacheModel.jobPostId = getJobPostId();

		jobApplicantCacheModel.skill = getSkill();

		String skill = jobApplicantCacheModel.skill;

		if ((skill != null) && (skill.length() == 0)) {
			jobApplicantCacheModel.skill = null;
		}

		jobApplicantCacheModel.webAuthorization = getWebAuthorization();

		String webAuthorization = jobApplicantCacheModel.webAuthorization;

		if ((webAuthorization != null) && (webAuthorization.length() == 0)) {
			jobApplicantCacheModel.webAuthorization = null;
		}

		return jobApplicantCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<JobApplicant, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<JobApplicant, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<JobApplicant, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((JobApplicant)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, JobApplicant>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					JobApplicant.class, ModelWrapper.class);

	}

	private long _jobApplicantID;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _firstName;
	private String _lastName;
	private String _phoneNumber;
	private String _email;
	private String _jobType;
	private String _state;
	private String _message;
	private long _fileId;
	private long _jobPostId;
	private String _skill;
	private String _webAuthorization;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<JobApplicant, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((JobApplicant)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("jobApplicantID", _jobApplicantID);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("firstName", _firstName);
		_columnOriginalValues.put("lastName", _lastName);
		_columnOriginalValues.put("phoneNumber", _phoneNumber);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("jobType", _jobType);
		_columnOriginalValues.put("state_", _state);
		_columnOriginalValues.put("message", _message);
		_columnOriginalValues.put("fileId", _fileId);
		_columnOriginalValues.put("jobPostId", _jobPostId);
		_columnOriginalValues.put("skill", _skill);
		_columnOriginalValues.put("webAuthorization", _webAuthorization);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("state_", "state");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("jobApplicantID", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("firstName", 128L);

		columnBitmasks.put("lastName", 256L);

		columnBitmasks.put("phoneNumber", 512L);

		columnBitmasks.put("email", 1024L);

		columnBitmasks.put("jobType", 2048L);

		columnBitmasks.put("state_", 4096L);

		columnBitmasks.put("message", 8192L);

		columnBitmasks.put("fileId", 16384L);

		columnBitmasks.put("jobPostId", 32768L);

		columnBitmasks.put("skill", 65536L);

		columnBitmasks.put("webAuthorization", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private JobApplicant _escapedModel;

}