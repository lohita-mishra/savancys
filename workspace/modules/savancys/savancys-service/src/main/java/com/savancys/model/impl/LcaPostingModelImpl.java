/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.savancys.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.savancys.model.LcaPosting;
import com.savancys.model.LcaPostingModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the LcaPosting service. Represents a row in the &quot;LCA_Posting&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>LcaPostingModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LcaPostingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LcaPostingImpl
 * @generated
 */
@JSON(strict = true)
public class LcaPostingModelImpl
	extends BaseModelImpl<LcaPosting> implements LcaPostingModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lca posting model instance should use the <code>LcaPosting</code> interface instead.
	 */
	public static final String TABLE_NAME = "LCA_Posting";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"lcaPostingId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"designation", Types.VARCHAR}, {"location", Types.VARCHAR},
		{"oNetCode", Types.VARCHAR}, {"description", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lcaPostingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("designation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("oNetCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table LCA_Posting (uuid_ VARCHAR(75) null,lcaPostingId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,designation VARCHAR(75) null,location VARCHAR(75) null,oNetCode VARCHAR(75) null,description STRING null)";

	public static final String TABLE_SQL_DROP = "drop table LCA_Posting";

	public static final String ORDER_BY_JPQL =
		" ORDER BY lcaPosting.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY LCA_Posting.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DESIGNATION_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LOCATION_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public LcaPostingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lcaPostingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLcaPostingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lcaPostingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LcaPosting.class;
	}

	@Override
	public String getModelClassName() {
		return LcaPosting.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LcaPosting, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LcaPosting, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LcaPosting, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((LcaPosting)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LcaPosting, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LcaPosting, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LcaPosting)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LcaPosting, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LcaPosting, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<LcaPosting, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<LcaPosting, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<LcaPosting, Object>>();

			attributeGetterFunctions.put("uuid", LcaPosting::getUuid);
			attributeGetterFunctions.put(
				"lcaPostingId", LcaPosting::getLcaPostingId);
			attributeGetterFunctions.put("groupId", LcaPosting::getGroupId);
			attributeGetterFunctions.put("companyId", LcaPosting::getCompanyId);
			attributeGetterFunctions.put("userId", LcaPosting::getUserId);
			attributeGetterFunctions.put("userName", LcaPosting::getUserName);
			attributeGetterFunctions.put(
				"createDate", LcaPosting::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", LcaPosting::getModifiedDate);
			attributeGetterFunctions.put(
				"designation", LcaPosting::getDesignation);
			attributeGetterFunctions.put("location", LcaPosting::getLocation);
			attributeGetterFunctions.put("oNetCode", LcaPosting::getONetCode);
			attributeGetterFunctions.put(
				"description", LcaPosting::getDescription);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<LcaPosting, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<LcaPosting, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<LcaPosting, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<LcaPosting, String>)LcaPosting::setUuid);
			attributeSetterBiConsumers.put(
				"lcaPostingId",
				(BiConsumer<LcaPosting, Long>)LcaPosting::setLcaPostingId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<LcaPosting, Long>)LcaPosting::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<LcaPosting, Long>)LcaPosting::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId", (BiConsumer<LcaPosting, Long>)LcaPosting::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<LcaPosting, String>)LcaPosting::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<LcaPosting, Date>)LcaPosting::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<LcaPosting, Date>)LcaPosting::setModifiedDate);
			attributeSetterBiConsumers.put(
				"designation",
				(BiConsumer<LcaPosting, String>)LcaPosting::setDesignation);
			attributeSetterBiConsumers.put(
				"location",
				(BiConsumer<LcaPosting, String>)LcaPosting::setLocation);
			attributeSetterBiConsumers.put(
				"oNetCode",
				(BiConsumer<LcaPosting, String>)LcaPosting::setONetCode);
			attributeSetterBiConsumers.put(
				"description",
				(BiConsumer<LcaPosting, String>)LcaPosting::setDescription);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getLcaPostingId() {
		return _lcaPostingId;
	}

	@Override
	public void setLcaPostingId(long lcaPostingId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lcaPostingId = lcaPostingId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getDesignation() {
		if (_designation == null) {
			return "";
		}
		else {
			return _designation;
		}
	}

	@Override
	public void setDesignation(String designation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_designation = designation;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalDesignation() {
		return getColumnOriginalValue("designation");
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return "";
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_location = location;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalLocation() {
		return getColumnOriginalValue("location");
	}

	@JSON
	@Override
	public String getONetCode() {
		if (_oNetCode == null) {
			return "";
		}
		else {
			return _oNetCode;
		}
	}

	@Override
	public void setONetCode(String oNetCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_oNetCode = oNetCode;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(LcaPosting.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), LcaPosting.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LcaPosting toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, LcaPosting>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LcaPostingImpl lcaPostingImpl = new LcaPostingImpl();

		lcaPostingImpl.setUuid(getUuid());
		lcaPostingImpl.setLcaPostingId(getLcaPostingId());
		lcaPostingImpl.setGroupId(getGroupId());
		lcaPostingImpl.setCompanyId(getCompanyId());
		lcaPostingImpl.setUserId(getUserId());
		lcaPostingImpl.setUserName(getUserName());
		lcaPostingImpl.setCreateDate(getCreateDate());
		lcaPostingImpl.setModifiedDate(getModifiedDate());
		lcaPostingImpl.setDesignation(getDesignation());
		lcaPostingImpl.setLocation(getLocation());
		lcaPostingImpl.setONetCode(getONetCode());
		lcaPostingImpl.setDescription(getDescription());

		lcaPostingImpl.resetOriginalValues();

		return lcaPostingImpl;
	}

	@Override
	public LcaPosting cloneWithOriginalValues() {
		LcaPostingImpl lcaPostingImpl = new LcaPostingImpl();

		lcaPostingImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		lcaPostingImpl.setLcaPostingId(
			this.<Long>getColumnOriginalValue("lcaPostingId"));
		lcaPostingImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		lcaPostingImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		lcaPostingImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		lcaPostingImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		lcaPostingImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		lcaPostingImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		lcaPostingImpl.setDesignation(
			this.<String>getColumnOriginalValue("designation"));
		lcaPostingImpl.setLocation(
			this.<String>getColumnOriginalValue("location"));
		lcaPostingImpl.setONetCode(
			this.<String>getColumnOriginalValue("oNetCode"));
		lcaPostingImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));

		return lcaPostingImpl;
	}

	@Override
	public int compareTo(LcaPosting lcaPosting) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), lcaPosting.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof LcaPosting)) {
			return false;
		}

		LcaPosting lcaPosting = (LcaPosting)object;

		long primaryKey = lcaPosting.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<LcaPosting> toCacheModel() {
		LcaPostingCacheModel lcaPostingCacheModel = new LcaPostingCacheModel();

		lcaPostingCacheModel.uuid = getUuid();

		String uuid = lcaPostingCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			lcaPostingCacheModel.uuid = null;
		}

		lcaPostingCacheModel.lcaPostingId = getLcaPostingId();

		lcaPostingCacheModel.groupId = getGroupId();

		lcaPostingCacheModel.companyId = getCompanyId();

		lcaPostingCacheModel.userId = getUserId();

		lcaPostingCacheModel.userName = getUserName();

		String userName = lcaPostingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			lcaPostingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			lcaPostingCacheModel.createDate = createDate.getTime();
		}
		else {
			lcaPostingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			lcaPostingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			lcaPostingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		lcaPostingCacheModel.designation = getDesignation();

		String designation = lcaPostingCacheModel.designation;

		if ((designation != null) && (designation.length() == 0)) {
			lcaPostingCacheModel.designation = null;
		}

		lcaPostingCacheModel.location = getLocation();

		String location = lcaPostingCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			lcaPostingCacheModel.location = null;
		}

		lcaPostingCacheModel.oNetCode = getONetCode();

		String oNetCode = lcaPostingCacheModel.oNetCode;

		if ((oNetCode != null) && (oNetCode.length() == 0)) {
			lcaPostingCacheModel.oNetCode = null;
		}

		lcaPostingCacheModel.description = getDescription();

		String description = lcaPostingCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			lcaPostingCacheModel.description = null;
		}

		return lcaPostingCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LcaPosting, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LcaPosting, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LcaPosting, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((LcaPosting)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, LcaPosting>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					LcaPosting.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _lcaPostingId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _designation;
	private String _location;
	private String _oNetCode;
	private String _description;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<LcaPosting, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((LcaPosting)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("lcaPostingId", _lcaPostingId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("designation", _designation);
		_columnOriginalValues.put("location", _location);
		_columnOriginalValues.put("oNetCode", _oNetCode);
		_columnOriginalValues.put("description", _description);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("lcaPostingId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("designation", 256L);

		columnBitmasks.put("location", 512L);

		columnBitmasks.put("oNetCode", 1024L);

		columnBitmasks.put("description", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private LcaPosting _escapedModel;

}