/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.savancys.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.savancys.model.ContactUs;
import com.savancys.model.ContactUsModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ContactUs service. Represents a row in the &quot;ContactUs&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ContactUsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ContactUsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ContactUsImpl
 * @generated
 */
@JSON(strict = true)
public class ContactUsModelImpl
	extends BaseModelImpl<ContactUs> implements ContactUsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a contact us model instance should use the <code>ContactUs</code> interface instead.
	 */
	public static final String TABLE_NAME = "ContactUs";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"contactId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"inquiryType", Types.VARCHAR}, {"firstName", Types.VARCHAR},
		{"lastName", Types.VARCHAR}, {"phoneNumber", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"companyName", Types.VARCHAR},
		{"country", Types.VARCHAR}, {"additionalInfo", Types.VARCHAR},
		{"fullname", Types.VARCHAR}, {"street", Types.VARCHAR},
		{"city", Types.VARCHAR}, {"postcode", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("inquiryType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("country", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("additionalInfo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fullname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("street", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postcode", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ContactUs (uuid_ VARCHAR(75) null,contactId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,inquiryType VARCHAR(75) null,firstName VARCHAR(75) null,lastName VARCHAR(75) null,phoneNumber VARCHAR(75) null,email VARCHAR(75) null,companyName VARCHAR(75) null,country VARCHAR(75) null,additionalInfo VARCHAR(500) null,fullname VARCHAR(200) null,street VARCHAR(200) null,city VARCHAR(75) null,postcode VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table ContactUs";

	public static final String ORDER_BY_JPQL =
		" ORDER BY contactUs.contactId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ContactUs.contactId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CONTACTID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ContactUsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _contactId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setContactId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _contactId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ContactUs.class;
	}

	@Override
	public String getModelClassName() {
		return ContactUs.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ContactUs, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ContactUs, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ContactUs, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((ContactUs)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ContactUs, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ContactUs, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ContactUs)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ContactUs, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ContactUs, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<ContactUs, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<ContactUs, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<ContactUs, Object>>();

			attributeGetterFunctions.put("uuid", ContactUs::getUuid);
			attributeGetterFunctions.put("contactId", ContactUs::getContactId);
			attributeGetterFunctions.put("groupId", ContactUs::getGroupId);
			attributeGetterFunctions.put("companyId", ContactUs::getCompanyId);
			attributeGetterFunctions.put("userId", ContactUs::getUserId);
			attributeGetterFunctions.put("userName", ContactUs::getUserName);
			attributeGetterFunctions.put(
				"createDate", ContactUs::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", ContactUs::getModifiedDate);
			attributeGetterFunctions.put(
				"inquiryType", ContactUs::getInquiryType);
			attributeGetterFunctions.put("firstName", ContactUs::getFirstName);
			attributeGetterFunctions.put("lastName", ContactUs::getLastName);
			attributeGetterFunctions.put(
				"phoneNumber", ContactUs::getPhoneNumber);
			attributeGetterFunctions.put("email", ContactUs::getEmail);
			attributeGetterFunctions.put(
				"companyName", ContactUs::getCompanyName);
			attributeGetterFunctions.put("country", ContactUs::getCountry);
			attributeGetterFunctions.put(
				"additionalInfo", ContactUs::getAdditionalInfo);
			attributeGetterFunctions.put("fullname", ContactUs::getFullname);
			attributeGetterFunctions.put("street", ContactUs::getStreet);
			attributeGetterFunctions.put("city", ContactUs::getCity);
			attributeGetterFunctions.put("postcode", ContactUs::getPostcode);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<ContactUs, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<ContactUs, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<ContactUs, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<ContactUs, String>)ContactUs::setUuid);
			attributeSetterBiConsumers.put(
				"contactId",
				(BiConsumer<ContactUs, Long>)ContactUs::setContactId);
			attributeSetterBiConsumers.put(
				"groupId", (BiConsumer<ContactUs, Long>)ContactUs::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<ContactUs, Long>)ContactUs::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId", (BiConsumer<ContactUs, Long>)ContactUs::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<ContactUs, String>)ContactUs::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<ContactUs, Date>)ContactUs::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<ContactUs, Date>)ContactUs::setModifiedDate);
			attributeSetterBiConsumers.put(
				"inquiryType",
				(BiConsumer<ContactUs, String>)ContactUs::setInquiryType);
			attributeSetterBiConsumers.put(
				"firstName",
				(BiConsumer<ContactUs, String>)ContactUs::setFirstName);
			attributeSetterBiConsumers.put(
				"lastName",
				(BiConsumer<ContactUs, String>)ContactUs::setLastName);
			attributeSetterBiConsumers.put(
				"phoneNumber",
				(BiConsumer<ContactUs, String>)ContactUs::setPhoneNumber);
			attributeSetterBiConsumers.put(
				"email", (BiConsumer<ContactUs, String>)ContactUs::setEmail);
			attributeSetterBiConsumers.put(
				"companyName",
				(BiConsumer<ContactUs, String>)ContactUs::setCompanyName);
			attributeSetterBiConsumers.put(
				"country",
				(BiConsumer<ContactUs, String>)ContactUs::setCountry);
			attributeSetterBiConsumers.put(
				"additionalInfo",
				(BiConsumer<ContactUs, String>)ContactUs::setAdditionalInfo);
			attributeSetterBiConsumers.put(
				"fullname",
				(BiConsumer<ContactUs, String>)ContactUs::setFullname);
			attributeSetterBiConsumers.put(
				"street", (BiConsumer<ContactUs, String>)ContactUs::setStreet);
			attributeSetterBiConsumers.put(
				"city", (BiConsumer<ContactUs, String>)ContactUs::setCity);
			attributeSetterBiConsumers.put(
				"postcode",
				(BiConsumer<ContactUs, String>)ContactUs::setPostcode);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getContactId() {
		return _contactId;
	}

	@Override
	public void setContactId(long contactId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactId = contactId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getInquiryType() {
		if (_inquiryType == null) {
			return "";
		}
		else {
			return _inquiryType;
		}
	}

	@Override
	public void setInquiryType(String inquiryType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_inquiryType = inquiryType;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName = firstName;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastName = lastName;
	}

	@JSON
	@Override
	public String getPhoneNumber() {
		if (_phoneNumber == null) {
			return "";
		}
		else {
			return _phoneNumber;
		}
	}

	@Override
	public void setPhoneNumber(String phoneNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phoneNumber = phoneNumber;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getCompanyName() {
		if (_companyName == null) {
			return "";
		}
		else {
			return _companyName;
		}
	}

	@Override
	public void setCompanyName(String companyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyName = companyName;
	}

	@JSON
	@Override
	public String getCountry() {
		if (_country == null) {
			return "";
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_country = country;
	}

	@JSON
	@Override
	public String getAdditionalInfo() {
		if (_additionalInfo == null) {
			return "";
		}
		else {
			return _additionalInfo;
		}
	}

	@Override
	public void setAdditionalInfo(String additionalInfo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_additionalInfo = additionalInfo;
	}

	@JSON
	@Override
	public String getFullname() {
		if (_fullname == null) {
			return "";
		}
		else {
			return _fullname;
		}
	}

	@Override
	public void setFullname(String fullname) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fullname = fullname;
	}

	@JSON
	@Override
	public String getStreet() {
		if (_street == null) {
			return "";
		}
		else {
			return _street;
		}
	}

	@Override
	public void setStreet(String street) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_street = street;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_city = city;
	}

	@JSON
	@Override
	public String getPostcode() {
		if (_postcode == null) {
			return "";
		}
		else {
			return _postcode;
		}
	}

	@Override
	public void setPostcode(String postcode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postcode = postcode;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(ContactUs.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ContactUs.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ContactUs toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ContactUs>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ContactUsImpl contactUsImpl = new ContactUsImpl();

		contactUsImpl.setUuid(getUuid());
		contactUsImpl.setContactId(getContactId());
		contactUsImpl.setGroupId(getGroupId());
		contactUsImpl.setCompanyId(getCompanyId());
		contactUsImpl.setUserId(getUserId());
		contactUsImpl.setUserName(getUserName());
		contactUsImpl.setCreateDate(getCreateDate());
		contactUsImpl.setModifiedDate(getModifiedDate());
		contactUsImpl.setInquiryType(getInquiryType());
		contactUsImpl.setFirstName(getFirstName());
		contactUsImpl.setLastName(getLastName());
		contactUsImpl.setPhoneNumber(getPhoneNumber());
		contactUsImpl.setEmail(getEmail());
		contactUsImpl.setCompanyName(getCompanyName());
		contactUsImpl.setCountry(getCountry());
		contactUsImpl.setAdditionalInfo(getAdditionalInfo());
		contactUsImpl.setFullname(getFullname());
		contactUsImpl.setStreet(getStreet());
		contactUsImpl.setCity(getCity());
		contactUsImpl.setPostcode(getPostcode());

		contactUsImpl.resetOriginalValues();

		return contactUsImpl;
	}

	@Override
	public ContactUs cloneWithOriginalValues() {
		ContactUsImpl contactUsImpl = new ContactUsImpl();

		contactUsImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		contactUsImpl.setContactId(
			this.<Long>getColumnOriginalValue("contactId"));
		contactUsImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		contactUsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		contactUsImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		contactUsImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		contactUsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		contactUsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		contactUsImpl.setInquiryType(
			this.<String>getColumnOriginalValue("inquiryType"));
		contactUsImpl.setFirstName(
			this.<String>getColumnOriginalValue("firstName"));
		contactUsImpl.setLastName(
			this.<String>getColumnOriginalValue("lastName"));
		contactUsImpl.setPhoneNumber(
			this.<String>getColumnOriginalValue("phoneNumber"));
		contactUsImpl.setEmail(this.<String>getColumnOriginalValue("email"));
		contactUsImpl.setCompanyName(
			this.<String>getColumnOriginalValue("companyName"));
		contactUsImpl.setCountry(
			this.<String>getColumnOriginalValue("country"));
		contactUsImpl.setAdditionalInfo(
			this.<String>getColumnOriginalValue("additionalInfo"));
		contactUsImpl.setFullname(
			this.<String>getColumnOriginalValue("fullname"));
		contactUsImpl.setStreet(this.<String>getColumnOriginalValue("street"));
		contactUsImpl.setCity(this.<String>getColumnOriginalValue("city"));
		contactUsImpl.setPostcode(
			this.<String>getColumnOriginalValue("postcode"));

		return contactUsImpl;
	}

	@Override
	public int compareTo(ContactUs contactUs) {
		int value = 0;

		if (getContactId() < contactUs.getContactId()) {
			value = -1;
		}
		else if (getContactId() > contactUs.getContactId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ContactUs)) {
			return false;
		}

		ContactUs contactUs = (ContactUs)object;

		long primaryKey = contactUs.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ContactUs> toCacheModel() {
		ContactUsCacheModel contactUsCacheModel = new ContactUsCacheModel();

		contactUsCacheModel.uuid = getUuid();

		String uuid = contactUsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			contactUsCacheModel.uuid = null;
		}

		contactUsCacheModel.contactId = getContactId();

		contactUsCacheModel.groupId = getGroupId();

		contactUsCacheModel.companyId = getCompanyId();

		contactUsCacheModel.userId = getUserId();

		contactUsCacheModel.userName = getUserName();

		String userName = contactUsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			contactUsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			contactUsCacheModel.createDate = createDate.getTime();
		}
		else {
			contactUsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			contactUsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			contactUsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		contactUsCacheModel.inquiryType = getInquiryType();

		String inquiryType = contactUsCacheModel.inquiryType;

		if ((inquiryType != null) && (inquiryType.length() == 0)) {
			contactUsCacheModel.inquiryType = null;
		}

		contactUsCacheModel.firstName = getFirstName();

		String firstName = contactUsCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			contactUsCacheModel.firstName = null;
		}

		contactUsCacheModel.lastName = getLastName();

		String lastName = contactUsCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			contactUsCacheModel.lastName = null;
		}

		contactUsCacheModel.phoneNumber = getPhoneNumber();

		String phoneNumber = contactUsCacheModel.phoneNumber;

		if ((phoneNumber != null) && (phoneNumber.length() == 0)) {
			contactUsCacheModel.phoneNumber = null;
		}

		contactUsCacheModel.email = getEmail();

		String email = contactUsCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			contactUsCacheModel.email = null;
		}

		contactUsCacheModel.companyName = getCompanyName();

		String companyName = contactUsCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			contactUsCacheModel.companyName = null;
		}

		contactUsCacheModel.country = getCountry();

		String country = contactUsCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			contactUsCacheModel.country = null;
		}

		contactUsCacheModel.additionalInfo = getAdditionalInfo();

		String additionalInfo = contactUsCacheModel.additionalInfo;

		if ((additionalInfo != null) && (additionalInfo.length() == 0)) {
			contactUsCacheModel.additionalInfo = null;
		}

		contactUsCacheModel.fullname = getFullname();

		String fullname = contactUsCacheModel.fullname;

		if ((fullname != null) && (fullname.length() == 0)) {
			contactUsCacheModel.fullname = null;
		}

		contactUsCacheModel.street = getStreet();

		String street = contactUsCacheModel.street;

		if ((street != null) && (street.length() == 0)) {
			contactUsCacheModel.street = null;
		}

		contactUsCacheModel.city = getCity();

		String city = contactUsCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			contactUsCacheModel.city = null;
		}

		contactUsCacheModel.postcode = getPostcode();

		String postcode = contactUsCacheModel.postcode;

		if ((postcode != null) && (postcode.length() == 0)) {
			contactUsCacheModel.postcode = null;
		}

		return contactUsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ContactUs, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ContactUs, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ContactUs, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ContactUs)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ContactUs>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ContactUs.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _contactId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _inquiryType;
	private String _firstName;
	private String _lastName;
	private String _phoneNumber;
	private String _email;
	private String _companyName;
	private String _country;
	private String _additionalInfo;
	private String _fullname;
	private String _street;
	private String _city;
	private String _postcode;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ContactUs, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ContactUs)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("contactId", _contactId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("inquiryType", _inquiryType);
		_columnOriginalValues.put("firstName", _firstName);
		_columnOriginalValues.put("lastName", _lastName);
		_columnOriginalValues.put("phoneNumber", _phoneNumber);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("companyName", _companyName);
		_columnOriginalValues.put("country", _country);
		_columnOriginalValues.put("additionalInfo", _additionalInfo);
		_columnOriginalValues.put("fullname", _fullname);
		_columnOriginalValues.put("street", _street);
		_columnOriginalValues.put("city", _city);
		_columnOriginalValues.put("postcode", _postcode);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("contactId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("inquiryType", 256L);

		columnBitmasks.put("firstName", 512L);

		columnBitmasks.put("lastName", 1024L);

		columnBitmasks.put("phoneNumber", 2048L);

		columnBitmasks.put("email", 4096L);

		columnBitmasks.put("companyName", 8192L);

		columnBitmasks.put("country", 16384L);

		columnBitmasks.put("additionalInfo", 32768L);

		columnBitmasks.put("fullname", 65536L);

		columnBitmasks.put("street", 131072L);

		columnBitmasks.put("city", 262144L);

		columnBitmasks.put("postcode", 524288L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ContactUs _escapedModel;

}